/**
 * @file GluSynapseHelper.hoc
 * @brief Encapsulate any hoc actions that are necessary to instantiate this synapse type
 * @author king, chindemi
 * @date 26/04/2017
 * @remark Copyright Â© BBP/EPFL 2005-2016; All rights reserved. Do not distribute without further notice.
 */

/**
 * This helper object will encapsulate the hoc actions needed to create our plastic excitatory synapse
 */
{load_file("RNGSettings.hoc")}
begintemplate GluSynapseLegacyHelper

objref synapse
public synapse

/**
 * @param tgid gid of Postsynaptic cell
 * @param synParameters set of paramters loaded from default nrn.h5
 * @param x location of the synapse along the section (0<=x<=1)
 * @param synapseID id assigned to this synapses within the cell's context
 * @param baseSeed for random number generator
 * @param parseConnection Map of field/value pairs of Connection block taken from ConfigParser
 */
proc init() { local tgid, x, synapseID, baseSeed, res, spopid, tpopid  localobj synParams, parseConnection, fname, rngInfo
    strdef datasetName

    tgid = $1
    synParams = $o2
    x = $3
    synapseID = $4
    baseSeed = $5
    if (numarg()>=8) {
        spopid = $6 // placeholder
        tpopid = $7 // placeholder
        parseConnection = $o8
    } else {
        parseConnection = $o6
        spopid = 0 // placeholder
        tpopid = 1 // placeholder
    }

    rngInfo = new RNGSettings()
    synapse = new GluSynapse(x)

    if( synParams.maskValue > 1 ) {
        // deactivate synapses not part of original functional circuit
        synapse.synstate_RW = 0
    }
    
    // for now, use two seeds based on gid and snyapseID.  In the future we will have an optional synapseSeed
    // also note that somewhere we must have set the random123 global seed (BlueConfig BaseSeed)
    synapse.setRNG( tgid, 100000 + synapseID, rngInfo.getSynapseSeed() + 200)
    synapse.synapseID = synapseID
}

endtemplate GluSynapseLegacyHelper

